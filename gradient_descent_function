AA from numpy import *
m = 20
x0=ones((m,1))
x1=arange(1,m+1).reshape(m,1)
X=hstack((x0,x1))
Y=array([3,4,5,5,2,4,7,8,11,8,12,11,13,13,16,17,18,17,19,21]).reshape(m,1)
alpha = 0.01
def cost_function(theta,X,Y):
    diff = dot(X,theta)-Y
    return (1/(2*m))*dot(diff.T,diff)
def gradient_function(theta,X,Y):
    diff = dot(X,theta)-Y
    return (1/m)*dot(X.T,diff)
def gradient_decent(X,Y,alpha):
    theta = array([1, 1]).reshape(2, 1)
    gradient = gradient_function(theta, X, Y)
    while not all(abs(gradient) <= 1e-5):
        theta = theta - alpha * gradient
        gradient = gradient_function(theta, X, Y)
        return theta
optimal = gradient_decent(X,Y,alpha)
print ('optimal:',optimal)
print ('cost function:',cost_function(optimal,X,Y)[0][0])
def plot(X,Y,theta):
    import matplotlib.pyplot as plt
    ax = plt.subplot(111)
    ax.scatter(X,Y,s=30,c='red',marker='s')
    plt.xlabel('X')
    plt.ylabel('Y')
    x=arange(0,21,0.2)
    y=theta[0]+theta[1]*x
    ax.plot(x,y)
plot(X1,Y,optimal)
**************************************************************************************************************
BBimport numpy as np
X1= np.arange(120).reshape(6,4,5)
print (X1)
X2=np.arange(1,5).reshape(4,1)
print (X2)
X3=np.ones((5,1))
result = X2.T*X3
print (result)

X4=np.arange(1,5).reshape(2,2)
print (X4)
X5=np.arange(5,9).reshape(2,2)
print (X5)
result2=X4.T*X5
print (result2)
print (X4.T)
result3=np.inner(X4.T,X5)
print (result3)

print ("-"*1900)
print ("+"*200)

x=[(1,0.,3),(1,1.,3),(1,2.,3),(1,3.,2),(1,4.,4)]
y=[95.364,97.217205,75.195834,60.105519,49.342380]
epsilon=0.0001
alpha= 0.01
diff=[0,0]
max_itor=1000
error1=0
error0=0
cnt=0
m=len(x)
theta0 = 0
theta1= 0
theta2 = 0
while True:
    cnt +=1
    for i in range(m):
        diff[0]=(theta0+theta1*x[i][1]+theta2*x[i][2])-y[i]
        theta0 -=alpha*diff[0]*x[i][0]
        theta1 -= alpha * diff[0] * x[i][1]
        theta2 -= alpha * diff[0] * x[i][2]
    error1 = 0
    for lp in range(len(x)):
        error1 += (y[lp]-(theta0+theta1*x[lp][1]+theta2*x[lp][2]))**2/2
    if abs(error1-error0)<epsilon:
        break
    else:
        error0 =error1
    print ('theta0 :%f,theta1 : %f,theta2 : %f,error1 : %f'%(theta0,theta1,theta2,error1))
print ('Done : theta0:%f,theta1 : %f,theta2 : %f'%(theta0,theta1,theta2))
print 'interative times:%d'%cnt

x=[1,2,3,4,5]
leng= len(x)
print (leng)

y=x[1]
print (y)

x=[(1,0.,3),(1,1.,3),(1,2.,3),(1,4.,4)]
m=len(x)
z=x[2][2]
print (z)
print (m)
